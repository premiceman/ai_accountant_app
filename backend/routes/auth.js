// backend/routes/auth.js
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

const TOKEN_TTL = process.env.JWT_EXPIRES_IN || '2h';
const JWT_SECRET = process.env.JWT_SECRET || 'change-me';
const issueToken = (userId) => jwt.sign({ id: userId }, JWT_SECRET, { expiresIn: TOKEN_TTL });

function publicUser(u) {
  if (!u) return null;
  return {
    id: u._id,
    uid: u.uid,
    firstName: u.firstName || '',
    lastName: u.lastName || '',
    username: u.username || '',
    email: u.email || '',
    licenseTier: u.licenseTier || 'free',
    eulaAcceptedAt: u.eulaAcceptedAt || null,
    eulaVersion: u.eulaVersion || null,
    createdAt: u.createdAt,
    updatedAt: u.updatedAt,
  };
}

// POST /api/auth/signup
router.post('/signup', async (req, res) => {
  try {
    const { firstName, lastName, username, email, password } = req.body || {};
    if (!firstName || !lastName || !email || !password) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const exists = await User.findOne({ email: String(email).toLowerCase().trim() });
    if (exists) return res.status(400).json({ error: 'Email already registered' });

    const hash = await bcrypt.hash(String(password), 10);
    const user = new User({
      firstName: String(firstName).trim(),
      lastName:  String(lastName).trim(),
      username:  String(username || '').trim(),
      email:     String(email).toLowerCase().trim(),
      password:  hash,
      // uid is generated by schema default
    });
    await user.save();

    const token = issueToken(user._id);
    res.status(201).json({ token, user: publicUser(user) });
  } catch (e) {
    console.error('Signup error:', e);
    if (e.code === 11000 && e.keyPattern && e.keyPattern.uid) {
      return res.status(500).json({ error: 'Failed to allocate user id; please retry' });
    }
    res.status(500).json({ error: 'Server error' });
  }
});

// POST /api/auth/login
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body || {};
    if (!email || !password) return res.status(400).json({ error: 'Missing credentials' });

    const user = await User.findOne({ email: String(email).toLowerCase().trim() });
    if (!user || !user.password) return res.status(400).json({ error: 'Invalid credentials' });

    // Backfill uid for legacy accounts
    if (!user.uid) { user.uid = undefined; await user.save(); }

    const ok = await bcrypt.compare(String(password), user.password);
    if (!ok) return res.status(400).json({ error: 'Invalid credentials' });

    const token = issueToken(user._id);
    res.json({ token, user: publicUser(user) });
  } catch (e) {
    console.error('Login error:', e);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;
